name: 'Kubernetes toolset'
description: 'Github Action with Kubernetes tools: kubectl, kustomize, helm, kubeval, kubeaudit, conftest, jq, yq, go'
author: 'Stefan Prodan'
branding:
  icon: 'command'
  color: 'blue'
inputs:
  kubectl:
    description: 'kubectl version'
    required: false
  yq:
    description: 'yq version'
    required: false
  kustomize:
    description: 'kustomize version'
    required: false
  helm:
    description: 'helm version'
    required: false
  kubeseal:
    description: 'kubeseal version'
    required: false
  kubeval:
    description: 'kubeval version'
    required: false
  conftest:
    description: 'conftest version'
    required: false
  kubeaudit:
    description: 'kubeaudit version'
    required: false
  kubeconform:
    description: 'kubeconform version'
    required: false
  kyverno:
    description: 'kyverno version'
    required: false

runs:
  using: 'composite'
  steps:
    - shell: bash
      if: '${{ inputs.kubectl }}'
      run: |
        KUBECTL_VER='${{ inputs.kubectl }}'
        if [ "$KUBECTL_VER" == "latest" ]; then
            KUBECTL_VER=$(curl -sL https://storage.googleapis.com/kubernetes-release/release/stable.txt | sed -e 's/^v//')
        fi
        curl --fail -sL "https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VER}/bin/linux/amd64/kubectl" \
            -o /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl
        kubectl version --client

    - shell: bash
      if: '${{ inputs.yq }}'
      run: |
        YQ_VER='${{ inputs.yq }}'
        if [ "$YQ_VER" == "latest" ]; then
            YQ_VER=$(curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')
        fi
        curl -sL https://github.com/mikefarah/yq/releases/download/v${YQ_VER}/yq_linux_amd64 \
            -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq
        yq --version

    - shell: bash
      if: '${{ inputs.kustomize }}'
      run: |
        KUSTOMIZE_VER='${{ inputs.kustomize }}'
        URL="https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
        if [ "$KUSTOMIZE_VER" == "latest" ]; then
            KUSTOMIZE_VER=""
        fi
        curl -s "$URL" | bash -s -- "$KUSTOMIZE_VER" /usr/local/bin/
        kustomize version

    - shell: bash
      if: '${{ inputs.helm }}'
      run: |
        HELM_VER='${{ inputs.helm }}'
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh
        if [ "$HELM_VER" == "latest" ]; then
            ./get_helm.sh
        else
            ./get_helm.sh -v "v$HELM_VER"
        fi
        helm version --client

    - shell: bash
      if: '${{ inputs.kubeseal }}'
      run: |
        KUBESEAL_VER='${{ inputs.kubeseal }}'
        if [ "$KUBESEAL_VER" == "latest" ]; then
            KUBESEAL_VER=$(curl -sL https://api.github.com/repos/bitnami-labs/sealed-secrets/tags | jq -rS ".[] | .name" | head -1 | sed -e "s/^v//")
        fi
        curl -sL https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VER}/kubeseal-${KUBESEAL_VER}-linux-amd64.tar.gz |\
            tar xz && mv kubeseal /usr/local/bin/
        kubeseal --version

    - shell: bash
      if: '${{ inputs.kubeval }}'
      run: |
        KUBEVAL_VER='${{ inputs.kubeval }}'
        if [ "$KUBEVAL_VER" == "latest" ]; then
            KUBEVAL_VER=$(curl -sL https://api.github.com/repos/instrumenta/kubeval/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')
        fi
        curl -sL https://github.com/instrumenta/kubeval/releases/download/v${KUBEVAL_VER}/kubeval-linux-amd64.tar.gz |\
            tar xz && mv kubeval /usr/local/bin/kubeval
        kubeval --version

    - shell: bash
      if: '${{ inputs.conftest }}'
      run: |
        CONFTEST_VER='${{ inputs.conftest }}'
        if [ "$CONFTEST_VER" == "latest" ]; then
            CONFTEST_VER=$(curl -sL https://api.github.com/repos/open-policy-agent/conftest/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')
        fi
        wget -O conftest https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VER}/conftest_${CONFTEST_VER}_Linux_x86_64.tar.gz -q
        tar xzf conftest && mv conftest /usr/local/bin
        conftest --version

    - shell: bash
      if: '${{ inputs.kubeaudit }}'
      run: |
        KUBEAUDIT_VER='${{ inputs.kubeaudit }}'
        if [ "$KUBEAUDIT_VER" == "latest" ]; then
            KUBEAUDIT_VER=$(curl -sL https://api.github.com/repos/Shopify/kubeaudit/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')
        fi
        wget -O kubeaudit https://github.com/Shopify/kubeaudit/releases/download/${KUBEAUDIT_VER}/kubeaudit_${KUBEAUDIT_VER}_linux_amd64.tar.gz -q
        tar xzf kubeaudit && mv kubeaudit /usr/local/bin
        kubeaudit version

    - shell: bash
      if: '${{ inputs.kubeconform }}'
      run: |
        KUBECONFORM_VER='${{ inputs.kubeconform }}'
        if [ "$KUBECONFORM_VER" == "latest" ]; then
            KUBECONFORM_VER=$(curl -sL https://api.github.com/repos/yannh/kubeconform/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')
        fi
        curl -sSL https://github.com/yannh/kubeconform/releases/download/v${KUBECONFORM_VER}/kubeconform-linux-amd64.tar.gz |\
            tar xz && mv kubeconform /usr/local/bin/kubeconform
        kubeconform -v

    - shell: bash
      if: '${{ inputs.kyverno }}'
      run: |
        KYVERNO_VER='${{ inputs.kyverno }}'
        if [ "$KYVERNO_VER" == "latest" ]; then
            KYVERNO_VER=$(curl -sL https://api.github.com/repos/kyverno/kyverno/releases/latest | jq -r ".tag_name" | sed -e 's/^v//')
        fi
        curl -sSL https://github.com/kyverno/kyverno/releases/download/v${KYVERNO_VER}/kyverno-cli_v${KYVERNO_VER}_linux_x86_64.tar.gz |\
            tar xz && mv kyverno /usr/local/bin/kyverno
        kyverno version

